"""Module containing useful cleaning functions for processing data."""
from __future__ import annotations

import regex as re
import numpy as np
import pandas as pd
from itertools import islice

def clean_mhc_annotations(mhc: str) -> str:
    """Homogenize MHC allele notation, e.g. A0201.

    Args:
        mhc: Str with MHC name.

    Returns:
        Str with simplified MHC name.
    """
    if isinstance(mhc, float):
        return np.nan
    elif ',' in mhc or '[' in mhc:
        clean_annots = []
        mhc_list = [m.strip() for m in mhc.strip('][').split(',') if m.strip() != '']
        for mhc in mhc_list:
            mhc = mhc.split(",")[0]
            mhc = re.sub(r"\s*", "", mhc)
            mhc = mhc.replace("HLA-", "")
            mhc = mhc.replace("*", "")
            mhc = mhc.replace("w", "")

            # Truncate MHC name
            mhc = ":".join(mhc.split(":")[:2]) if ":" in mhc else mhc

            # Add missing 0s to name, e.g. A2 -> A02
            mhc = re.sub(r"([A-Z])(\d{1})(:|$)", r"\1" + ":0:" + r"\2", mhc)
            mhc = mhc.replace(":","")
            clean_annots.append(mhc)
        return clean_annots
    else:
        mhc = mhc.split(",")[0]
        mhc = re.sub(r"\s*", "", mhc)
        mhc = mhc.replace("HLA-", "")
        mhc = mhc.replace("*", "")
        mhc = mhc.replace("w", "")

        # Truncate MHC name
        mhc = ":".join(mhc.split(":")[:2]) if ":" in mhc else mhc

        # Add missing 0s to name, e.g. A2 -> A02
        mhc = re.sub(r"([A-Z])(\d{1})(:|$)", r"\1" + ":0:" + r"\2", mhc)
        mhc = mhc.replace(":","").replace("/","")
        return mhc

def cleanup_lists(list_of_values: list) -> list:
    """Cleanup messy lists generated by multiple pd.agg operations.

    Args:
        list_of_values (list): Messy list

    Returns:
        list: Flattened list of strings with duplicates and trailing punctuation chars removed.
    """    
    if isinstance(list_of_values, list):
        new_list = [x.strip().strip('][').strip('"').strip("'").strip(',') if isinstance(x, str) else np.nan for x in list_of_values]
        try:
            return sorted(list(set(new_list)))
        except:
            return list(set(new_list))
    
    elif isinstance(list_of_values, str):
        new_list = [x.strip().strip('][').strip('"').strip("'").strip(',') if isinstance(x, str) else np.nan for x in list_of_values.split(',')]
        try:
            return sorted(list(set(new_list)))
        except:
            return list(set(new_list))
    else:
        return np.nan
    
def divide_list_into_chunks(list_to_divide: list[str], chunksize: int) -> list[list]:
    """Divide list into chunks of size `chunksize`.

    Args:
        list_to_divide (list[str]): List to divide.
        chunksize (int): Size of chunks.

    Yields:
        Iterable[list]: Sub list of chunks.
    """
    for i in range(0, len(list_to_divide), chunksize):
        yield list_to_divide[i : i + chunksize]

def divide_dictionary_into_chunks(data: dict, chunksize: int=100000000) -> dict[str, str]:
    """Divide dictionary into chunks of size `chunksize`.

    Args:
        data (dict): Dictionary to divide into chunks.
        chunksize (int, optional): Size of chunks. Defaults to 100000000.

    Yields:
       dict[str, str]: Chunk of dictionary.
    """   
    iterable_dictionary = iter(data)
    for _ in range(0, len(data), chunksize):
        yield {k:data[k] for k in islice(iterable_dictionary, chunksize)}

def aggregate_and_clean_peptide_df(df: pd.DataFrame, agg_col: str) -> pd.DataFrame:
    """Aggregate dataframe by peptide sequence and cleanup columns.

    Args:
        df (pd.DataFrame): Dataframe containing duplicate peptides.
        agg_col (str): Peptide sequence column name to aggregate on.

    Returns:
        pd.DataFrame: Dataframe aggregated by peptide sequence.
    """    
    df = df.groupby([agg_col]).agg({'mhc_allele': lambda x: x.iloc[0],
                                    'data_source': lambda x: x.tolist(),
                                    'peptide_origin': lambda x: x.tolist()}).reset_index()
    df['mhc_allele'] = df['mhc_allele'].apply(cleanup_lists)
    df['data_source'] = df['data_source'].apply(cleanup_lists)
    df['peptide_origin'] = df['peptide_origin'].apply(cleanup_lists)

    return df